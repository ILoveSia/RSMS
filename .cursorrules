# ITCEN Solution - Cursor AI 규칙

## 프로젝트 개요
ITCEN Solution은 React 18 + Spring Boot 3.5 기반의 웹 애플리케이션입니다.
- Frontend: React 18.2, TypeScript, Material-UI v5, Vite
- Backend: Spring Boot 3.5, Java 21, PostgreSQL, Redis
- 아키텍처: Domain-Driven Design (DDD)

## 코딩 스타일 가이드

### TypeScript/React
- 함수형 컴포넌트와 React Hooks 사용
- TypeScript strict 모드 준수
- Props는 interface로 정의
- 상태 관리는 Redux Toolkit 사용
- 컴포넌트명은 PascalCase
- 파일명은 kebab-case 또는 PascalCase(컴포넌트)
- 2 스페이스 들여쓰기

### Java/Spring Boot
- Java 21 기능 활용 (record, switch expressions 등)
- SOLID 원칙 준수
- 계층형 아키텍처: Controller → Service → Repository
- 도메인별 패키지 구조
- Lombok 사용으로 보일러플레이트 최소화
- 4 스페이스 들여쓰기
- Google Java Style Guide 준수

### 파일 구조
```
backend/src/main/java/org/itcen/
├── auth/           # 인증/인가
├── common/         # 공통 유틸리티
├── config/         # 설정 클래스
└── domain/         # 도메인별 패키지
    ├── {domain}/
    │   ├── controller/
    │   ├── dto/
    │   ├── entity/
    │   ├── repository/
    │   └── service/
```

```
frontend/src/
├── app/            # 앱 레벨 설정
├── domains/        # 도메인별 모듈
│   ├── {domain}/
│   │   ├── api/
│   │   ├── components/
│   │   ├── pages/
│   │   ├── router/
│   │   └── store/
└── shared/         # 공유 컴포넌트
```

## 명명 규칙

### Backend (Java)
- 클래스: PascalCase (UserService, OrderController)
- 메서드/변수: camelCase (getUserById, totalAmount)
- 상수: UPPER_SNAKE_CASE (MAX_RETRY_COUNT)
- 패키지: lowercase (com.itcen.domain.user)

### Frontend (TypeScript)
- 컴포넌트: PascalCase (UserDialog, OrderList)
- 파일: kebab-case (user-dialog.tsx, order-list.tsx)
- 변수/함수: camelCase (userName, handleSubmit)
- 상수: UPPER_SNAKE_CASE (API_BASE_URL)
- 타입/인터페이스: PascalCase (User, ApiResponse)

## API 설계 원칙
- RESTful API 준수
- HTTP 상태 코드 적절히 사용
- 일관된 응답 구조 (ApiResponse<T>)
- snake_case JSON 응답
- 에러 처리는 GlobalExceptionHandler 활용

## 보안 고려사항
- Spring Security 사용
- SQL Injection 방지 (JPA 사용)
- XSS 방지 (입력값 검증)
- CORS 설정 적절히 구성
- 세션 기반 인증 (Redis 세션 저장소)

## 성능 최적화
- JPA 쿼리 최적화 (N+1 문제 방지)
- React 컴포넌트 최적화 (memo, useMemo, useCallback)
- 이미지 최적화
- 번들 크기 최적화

## 테스트 전략
- Unit Test: Jest (Frontend), JUnit 5 (Backend)
- Integration Test: Spring Boot Test
- E2E Test: 추후 Cypress 고려

## 문서화
- JSDoc (TypeScript)
- Javadoc (Java)
- README.md 업데이트
- API 문서는 Spring Boot Actuator 활용

## Git 커밋 규칙
- feat: 새로운 기능 추가
- fix: 버그 수정
- docs: 문서 수정
- style: 코드 포맷팅
- refactor: 코드 리팩토링
- test: 테스트 추가/수정
- chore: 빌드/패키지 매니저 수정

## 에러 처리
- 백엔드: GlobalExceptionHandler로 일관된 에러 응답
- 프론트엔드: try-catch 및 Error Boundary 활용
- 사용자 친화적 에러 메시지

## 주의사항
- 하드코딩 금지 (환경변수 활용)
- 민감정보 git 커밋 금지
- 코드 리뷰 필수
- 테스트 코드 작성 권장
- 성능에 영향을 주는 변경사항은 검토 필요

당신은 이 규칙들을 따라 코드를 작성하고 리뷰해야 합니다.
