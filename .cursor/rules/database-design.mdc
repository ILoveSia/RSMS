---
globs: "*.java,*.sql"
description: "Database design and JPA optimization rules"
---

# Database Design and JPA Optimization Rules

## üéØ DATABASE EXCELLENCE MANDATE
You are a **Database Design Expert** responsible for creating **efficient**, **scalable**, and **maintainable** database schemas and JPA entities in the ITCEN Solution. **Database performance directly impacts application scalability**.

## üìã CRITICAL DATABASE REQUIREMENTS

### ‚úÖ MANDATORY DATABASE PRACTICES

#### 1. **Entity Design**
- **ALWAYS** extend `BaseEntity` for audit fields (created_at, updated_at, created_id, updated_id)
- **ALWAYS** use `@GeneratedValue(strategy = GenerationType.IDENTITY)` for primary keys
- **ALWAYS** implement proper `@Column` annotations with constraints
- **ALWAYS** use appropriate data types for each field
- **ALWAYS** implement proper `toString()`, `equals()`, and `hashCode()` methods

#### 2. **Relationship Mapping**
- **ALWAYS** use `@EntityGraph` to prevent N+1 queries
- **ALWAYS** set appropriate fetch strategies (LAZY by default, EAGER only when necessary)
- **ALWAYS** use `@JoinColumn` with proper foreign key names
- **ALWAYS** implement bidirectional relationships carefully
- **ALWAYS** use `mappedBy` attribute for the non-owning side

#### 3. **Query Optimization**
- **ALWAYS** use `@Query` for complex queries
- **ALWAYS** implement pagination with `Pageable`
- **ALWAYS** use projections for read-only queries
- **ALWAYS** create database indexes for frequently queried columns
- **ALWAYS** use `@Transactional(readOnly = true)` for read operations

#### 4. **Database Schema**
- **ALWAYS** use snake_case for table and column names
- **ALWAYS** implement proper constraints (NOT NULL, UNIQUE, CHECK)
- **ALWAYS** create appropriate indexes for performance
- **ALWAYS** use consistent naming conventions
- **ALWAYS** implement soft delete when needed

### ‚ùå FORBIDDEN DATABASE PRACTICES

#### 1. **Performance Issues**
- **NEVER** use `findAll()` without pagination
- **NEVER** create N+1 query problems
- **NEVER** use EAGER fetching unnecessarily
- **NEVER** forget to add indexes on foreign keys
- **NEVER** use `SELECT *` in custom queries

#### 2. **Design Issues**
- **NEVER** store JSON data in relational columns without justification
- **NEVER** use composite primary keys unless absolutely necessary
- **NEVER** create circular references in entity relationships
- **NEVER** ignore database constraints and rely only on application validation
- **NEVER** use entity objects for DTOs

#### 3. **Transaction Issues**
- **NEVER** use long-running transactions
- **NEVER** perform database operations outside transaction boundaries
- **NEVER** ignore transaction rollback scenarios
- **NEVER** use inappropriate isolation levels
- **NEVER** forget to handle concurrent access scenarios

## üóÑÔ∏è DATABASE IMPLEMENTATION TEMPLATES

### Entity Design Template
```java
@Entity
@Table(name = "users", indexes = {
    @Index(name = "idx_user_email", columnList = "email"),
    @Index(name = "idx_user_department", columnList = "department_id"),
    @Index(name = "idx_user_active", columnList = "is_active")
})
@Getter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@ToString(exclude = {"department", "userRoles"})
@EqualsAndHashCode(callSuper = true, exclude = {"department", "userRoles"})
public class User extends BaseEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "name", nullable = false, length = 100)
    @NotBlank(message = "Name is required")
    @Size(min = 2, max = 100, message = "Name must be between 2 and 100 characters")
    private String name;

    @Column(name = "email", nullable = false, unique = true, length = 255)
    @NotBlank(message = "Email is required")
    @Email(message = "Email must be valid")
    private String email;

    @Column(name = "password_hash", nullable = false, length = 255)
    @NotBlank(message = "Password is required")
    private String passwordHash;

    @Column(name = "phone", length = 20)
    @Pattern(regexp = "^[+]?[0-9-\\s()]{10,20}$", message = "Invalid phone number format")
    private String phone;

    @Column(name = "is_active", nullable = false)
    @Builder.Default
    private Boolean isActive = true;

    @Column(name = "last_login_at")
    private LocalDateTime lastLoginAt;

    // Many-to-One relationship with proper join column
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "department_id", nullable = false,
                foreignKey = @ForeignKey(name = "fk_user_department"))
    @NotNull(message = "Department is required")
    private Department department;

    // One-to-Many relationship with cascade operations
    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
    @Builder.Default
    private Set<UserRole> userRoles = new HashSet<>();

    // Helper methods
    public void addUserRole(UserRole userRole) {
        userRoles.add(userRole);
        userRole.setUser(this);
    }

    public void removeUserRole(UserRole userRole) {
        userRoles.remove(userRole);
        userRole.setUser(null);
    }

    public boolean hasRole(String roleName) {
        return userRoles.stream()
                .anyMatch(userRole -> userRole.getRole().getName().equals(roleName));
    }
}

@Entity
@Table(name = "departments", indexes = {
    @Index(name = "idx_department_name", columnList = "name"),
    @Index(name = "idx_department_code", columnList = "code")
})
@Getter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@ToString(exclude = {"users"})
@EqualsAndHashCode(callSuper = true, exclude = {"users"})
public class Department extends BaseEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "name", nullable = false, unique = true, length = 100)
    @NotBlank(message = "Department name is required")
    private String name;

    @Column(name = "code", nullable = false, unique = true, length = 10)
    @NotBlank(message = "Department code is required")
    @Pattern(regexp = "^[A-Z0-9]{2,10}$", message = "Department code must be 2-10 uppercase alphanumeric characters")
    private String code;

    @Column(name = "description", length = 500)
    private String description;

    @Column(name = "is_active", nullable = false)
    @Builder.Default
    private Boolean isActive = true;

    // One-to-Many relationship
    @OneToMany(mappedBy = "department", fetch = FetchType.LAZY)
    @Builder.Default
    private Set<User> users = new HashSet<>();
}
```

### Repository Pattern Template
```java
@Repository
public interface UserRepository extends JpaRepository<User, Long>, JpaSpecificationExecutor<User> {

    // Simple query methods
    Optional<User> findByEmail(String email);

    boolean existsByEmail(String email);

    List<User> findByIsActiveTrue();

    // EntityGraph to prevent N+1 queries
    @EntityGraph(attributePaths = {"department", "userRoles", "userRoles.role"})
    Optional<User> findWithDetailsById(Long id);

    @EntityGraph(attributePaths = {"department"})
    Page<User> findAllWithDepartment(Pageable pageable);

    // Custom queries with proper projections
    @Query("SELECT new org.itcen.domain.user.dto.UserProjection(u.id, u.name, u.email, d.name) " +
           "FROM User u JOIN u.department d WHERE u.isActive = true")
    Page<UserProjection> findActiveUsersProjection(Pageable pageable);

    @Query("SELECT u FROM User u JOIN u.department d WHERE d.id = :departmentId AND u.isActive = true")
    Page<User> findActiveUsersByDepartment(@Param("departmentId") Long departmentId, Pageable pageable);

    // Count queries for pagination
    @Query("SELECT COUNT(u) FROM User u WHERE u.department.id = :departmentId AND u.isActive = true")
    long countActiveUsersByDepartment(@Param("departmentId") Long departmentId);

    // Native query for complex operations
    @Query(value = """
        SELECT u.* FROM users u
        INNER JOIN departments d ON u.department_id = d.id
        WHERE u.is_active = true
        AND d.is_active = true
        AND u.last_login_at > :since
        ORDER BY u.last_login_at DESC
        """, nativeQuery = true)
    List<User> findRecentActiveUsers(@Param("since") LocalDateTime since);

    // Bulk update operations
    @Modifying
    @Query("UPDATE User u SET u.isActive = false WHERE u.lastLoginAt < :cutoffDate")
    int deactivateInactiveUsers(@Param("cutoffDate") LocalDateTime cutoffDate);
}

// Specification for dynamic queries
@Component
public class UserSpecifications {

    public static Specification<User> hasName(String name) {
        return (root, query, criteriaBuilder) -> {
            if (name == null || name.trim().isEmpty()) {
                return criteriaBuilder.conjunction();
            }
            return criteriaBuilder.like(
                criteriaBuilder.lower(root.get("name")),
                "%" + name.toLowerCase() + "%"
            );
        };
    }

    public static Specification<User> belongsToDepartment(Long departmentId) {
        return (root, query, criteriaBuilder) -> {
            if (departmentId == null) {
                return criteriaBuilder.conjunction();
            }
            return criteriaBuilder.equal(root.get("department").get("id"), departmentId);
        };
    }

    public static Specification<User> isActive() {
        return (root, query, criteriaBuilder) ->
            criteriaBuilder.isTrue(root.get("isActive"));
    }

    public static Specification<User> hasEmail(String email) {
        return (root, query, criteriaBuilder) -> {
            if (email == null || email.trim().isEmpty()) {
                return criteriaBuilder.conjunction();
            }
            return criteriaBuilder.equal(
                criteriaBuilder.lower(root.get("email")),
                email.toLowerCase()
            );
        };
    }
}
```

### Service Layer Template
```java
@Service
@RequiredArgsConstructor
@Transactional
@Slf4j
public class UserServiceImpl implements UserService {

    private final UserRepository userRepository;
    private final DepartmentRepository departmentRepository;
    private final PasswordEncoder passwordEncoder;

    @Override
    @Transactional(readOnly = true)
    public Page<UserDto> getUsers(Pageable pageable, UserSearchCriteria criteria) {
        log.debug("Fetching users with criteria: {}", criteria);

        Specification<User> spec = buildSpecification(criteria);
        Page<User> users = userRepository.findAll(spec, pageable);

        return users.map(UserMapper::toDto);
    }

    @Override
    @Transactional(readOnly = true)
    public UserDto getUserById(Long id) {
        log.debug("Fetching user with ID: {}", id);

        User user = userRepository.findWithDetailsById(id)
            .orElseThrow(() -> new UserNotFoundException("User not found with ID: " + id));

        return UserMapper.toDetailDto(user);
    }

    @Override
    public UserDto createUser(CreateUserDto request) {
        log.info("Creating new user with email: {}", request.getEmail());

        // Validate email uniqueness
        if (userRepository.existsByEmail(request.getEmail())) {
            throw new BusinessException("Email already exists: " + request.getEmail());
        }

        // Fetch department
        Department department = departmentRepository.findById(request.getDepartmentId())
            .orElseThrow(() -> new DepartmentNotFoundException(
                "Department not found with ID: " + request.getDepartmentId()));

        // Create user entity
        User user = User.builder()
            .name(request.getName())
            .email(request.getEmail())
            .passwordHash(passwordEncoder.encode(request.getPassword()))
            .phone(request.getPhone())
            .department(department)
            .isActive(true)
            .build();

        User savedUser = userRepository.save(user);
        log.info("User created successfully with ID: {}", savedUser.getId());

        return UserMapper.toDto(savedUser);
    }

    @Override
    public UserDto updateUser(Long id, UpdateUserDto request) {
        log.info("Updating user with ID: {}", id);

        User user = userRepository.findById(id)
            .orElseThrow(() -> new UserNotFoundException("User not found with ID: " + id));

        // Update fields
        if (request.getName() != null) {
            user.setName(request.getName());
        }
        if (request.getPhone() != null) {
            user.setPhone(request.getPhone());
        }
        if (request.getDepartmentId() != null && !request.getDepartmentId().equals(user.getDepartment().getId())) {
            Department newDepartment = departmentRepository.findById(request.getDepartmentId())
                .orElseThrow(() -> new DepartmentNotFoundException(
                    "Department not found with ID: " + request.getDepartmentId()));
            user.setDepartment(newDepartment);
        }

        User updatedUser = userRepository.save(user);
        log.info("User updated successfully with ID: {}", updatedUser.getId());

        return UserMapper.toDto(updatedUser);
    }

    @Override
    public void deleteUser(Long id) {
        log.info("Deleting user with ID: {}", id);

        User user = userRepository.findById(id)
            .orElseThrow(() -> new UserNotFoundException("User not found with ID: " + id));

        // Soft delete
        user.setIsActive(false);
        userRepository.save(user);

        log.info("User soft deleted successfully with ID: {}", id);
    }

    private Specification<User> buildSpecification(UserSearchCriteria criteria) {
        return Specification.where(UserSpecifications.isActive())
            .and(UserSpecifications.hasName(criteria.getName()))
            .and(UserSpecifications.belongsToDepartment(criteria.getDepartmentId()))
            .and(UserSpecifications.hasEmail(criteria.getEmail()));
    }
}
```

### Database Schema Template
```sql
-- Create departments table
CREATE TABLE departments (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE,
    code VARCHAR(10) NOT NULL UNIQUE,
    description VARCHAR(500),
    is_active BOOLEAN NOT NULL DEFAULT true,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_id VARCHAR(100),
    updated_id VARCHAR(100)
);

-- Create indexes for departments
CREATE INDEX idx_department_name ON departments(name);
CREATE INDEX idx_department_code ON departments(code);
CREATE INDEX idx_department_active ON departments(is_active);

-- Create users table
CREATE TABLE users (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    phone VARCHAR(20),
    is_active BOOLEAN NOT NULL DEFAULT true,
    last_login_at TIMESTAMP,
    department_id BIGINT NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_id VARCHAR(100),
    updated_id VARCHAR(100),

    CONSTRAINT fk_user_department FOREIGN KEY (department_id)
        REFERENCES departments(id) ON DELETE RESTRICT
);

-- Create indexes for users
CREATE INDEX idx_user_email ON users(email);
CREATE INDEX idx_user_department ON users(department_id);
CREATE INDEX idx_user_active ON users(is_active);
CREATE INDEX idx_user_last_login ON users(last_login_at);
CREATE INDEX idx_user_name_active ON users(name, is_active);

-- Create roles table
CREATE TABLE roles (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE,
    description VARCHAR(200),
    is_active BOOLEAN NOT NULL DEFAULT true,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_id VARCHAR(100),
    updated_id VARCHAR(100)
);

-- Create user_roles junction table
CREATE TABLE user_roles (
    id BIGSERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL,
    role_id BIGINT NOT NULL,
    assigned_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    assigned_by VARCHAR(100),

    CONSTRAINT fk_user_role_user FOREIGN KEY (user_id)
        REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_user_role_role FOREIGN KEY (role_id)
        REFERENCES roles(id) ON DELETE CASCADE,
    CONSTRAINT uk_user_role UNIQUE (user_id, role_id)
);

-- Create indexes for user_roles
CREATE INDEX idx_user_roles_user ON user_roles(user_id);
CREATE INDEX idx_user_roles_role ON user_roles(role_id);
```

## üìä DATABASE OPTIMIZATION CHECKLIST

### Before Creating New Entities:
- [ ] **Entity design** follows naming conventions
- [ ] **Relationships** are properly mapped with correct fetch strategies
- [ ] **Indexes** are planned for frequently queried columns
- [ ] **Constraints** are implemented at database level
- [ ] **Audit fields** are included via BaseEntity

### Query Performance Optimization:
- [ ] **N+1 queries** are prevented with @EntityGraph
- [ ] **Pagination** is implemented for large datasets
- [ ] **Projections** are used for read-only operations
- [ ] **Database indexes** exist for all foreign keys and frequently queried columns
- [ ] **Query execution plans** are analyzed for performance

### Data Integrity:
- [ ] **Foreign key constraints** are properly defined
- [ ] **Unique constraints** are implemented where needed
- [ ] **Check constraints** validate data at database level
- [ ] **Soft delete** is implemented for audit trails
- [ ] **Transaction boundaries** are properly defined

---

**Database Principle**: **Design for scalability from day one** - optimize queries and structure for growth.
description:
globs:
alwaysApply: false
---
