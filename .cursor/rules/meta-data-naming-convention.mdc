# üéØ CRITICAL MANDATE: Meta-Data Driven Naming Convention

## üö® ABSOLUTE REQUIREMENTS - NEVER VIOLATE

### ‚úÖ MANDATORY ACTIONS (You MUST do these)

1. **ALWAYS query `meta_datas` table BEFORE creating any name**
2. **ALWAYS use standardized terms from `meta_datas.meta_eng` field**
3. **ALWAYS follow the prescribed naming formats exactly**
4. **ALWAYS validate naming consistency across the entire project**

### ‚ùå FORBIDDEN ACTIONS (You MUST NEVER do these)

1. **NEVER create arbitrary names without consulting meta_datas**
2. **NEVER use translation tools for naming**
3. **NEVER use non-standardized abbreviations**
4. **NEVER mix naming conventions within the same project**

---

## üìã Meta_datas Table Structure

```sql
CREATE TABLE meta_datas (
    no BIGSERIAL PRIMARY KEY,
    meta_cat_cd VARCHAR(20),     -- Category code (TABLE/COLUMN/METHOD/CLASS)
    meta_eng VARCHAR(20),        -- English name (PRIMARY source for naming) - MAX 20 chars
    meta_kor VARCHAR(30),        -- Korean description - MAX 30 chars
    meta_description VARCHAR     -- Detailed explanation
);
```

### üö® CRITICAL LENGTH RESTRICTIONS

- **meta_eng**: Maximum 20 characters (VARCHAR(20))
- **meta_kor**: Maximum 30 characters (VARCHAR(30))
- **Rationale**: Enforce concise, standardized naming conventions

## üîÑ MANDATORY WORKFLOW - Follow This Exact Process

### Step 1: Query First (NON-NEGOTIABLE)

```sql
-- ALWAYS start with this query
SELECT meta_eng, meta_kor, meta_description
FROM meta_datas
WHERE meta_cat_cd = '{CATEGORY}'
  AND (meta_kor LIKE '%{KEYWORD}%' OR meta_eng LIKE '%{KEYWORD}%');
```

### Step 2A: If Found - Apply Standard Terms (EXACT MATCH REQUIRED)

```sql
-- Use EXACT meta_eng values - NO modifications allowed
CREATE TABLE {meta_eng} (  -- Direct from meta_datas.meta_eng
    {meta_eng}_id VARCHAR(20),  -- Standard pattern
    -- ...
);
```

### Step 2B: If NOT Found - MANDATORY Registration Process

```sql
-- STEP 2B-1: Register new term in meta_datas FIRST
INSERT INTO meta_datas (meta_cat_cd, meta_eng, meta_kor, meta_description)
VALUES (
    'METHOD',                    -- Category
    'calculateCustomerScore',    -- Proposed English name
    'Í≥†Í∞ùÏ†êÏàòÍ≥ÑÏÇ∞',               -- Korean description
    'Calculate customer credit score based on transaction history'  -- Description
);

-- STEP 2B-2: Verify registration
SELECT meta_eng, meta_kor FROM meta_datas
WHERE meta_eng = 'calculateCustomerScore';

-- STEP 2B-3: Now use the registered term
-- public int calculateCustomerScore(String customerId) { ... }
```

### Step 3: Validate Consistency (MANDATORY CHECK)

```sql
-- Verify all names exist in meta_datas
SELECT COUNT(*) FROM meta_datas
WHERE meta_eng IN ('table_name', 'column_name', 'method_name');
```

## üìö STRICT NAMING RULES BY CATEGORY

### 1. TABLE NAMES

- **Category**: `meta_cat_cd = 'TABLE'`
- **Format**: `{meta_eng}` (snake_case)
- **Pattern**: `^[a-z][a-z0-9_]*$`
- **Examples**: `customer_info`, `channel_master`, `transaction_log`

### 2. COLUMN NAMES

- **Category**: `meta_cat_cd = 'COLUMN'`
- **Format**: `{meta_eng}` (snake_case)
- **Pattern**: `^[a-z][a-z0-9_]*$`
- **Examples**: `customer_id`, `channel_type`, `transaction_amount`

### 3. METHOD NAMES

- **Category**: `meta_cat_cd = 'METHOD'`
- **Format**: `{action}{MetaEng}` (camelCase)
- **Pattern**: `^[a-z][a-zA-Z0-9]*$`
- **Examples**: `findCustomer`, `updateChannel`, `createTransaction`

### 4. CLASS NAMES

- **Category**: `meta_cat_cd = 'CLASS'`
- **Format**: `{MetaEng}` (PascalCase)
- **Pattern**: `^[A-Z][a-zA-Z0-9]*$`
- **Examples**: `CustomerInfo`, `ChannelMaster`, `TransactionLog`

## üöÄ IMPLEMENTATION TEMPLATES

### Template 1: Table Creation (MANDATORY PROCESS)

```sql
-- STEP 1: Query meta_datas (REQUIRED)
SELECT meta_eng, meta_kor, meta_description
FROM meta_datas
WHERE meta_cat_cd = 'TABLE' AND meta_kor LIKE '%Í≥†Í∞ù%';

-- STEP 2: Use exact meta_eng result
CREATE TABLE customer_info (  -- EXACT match from meta_datas
    customer_id VARCHAR(20) PRIMARY KEY,
    customer_name VARCHAR(100) NOT NULL,
    channel_type VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### Template 2: Service Class Creation (MANDATORY PROCESS)

```java
// STEP 1: Query meta_datas for class naming
// Result: meta_eng = "CustomerInfo"

@Service
public class CustomerInfoService {  // EXACT meta_eng usage

    // STEP 2: Method names follow meta_datas standards
    public List<CustomerInfo> findCustomersByChannelType(String channelType) {
        return customerRepository.findByChannelType(channelType);
    }

    public void updateCustomerChannel(String customerId, String channelType) {
        // Implementation
    }
}
```

## üÜò MISSING TERMS HANDLING - When meta_datas Doesn't Have What You Need

### üö® CRITICAL RULE: NEVER Create Names Without meta_datas Entry

#### Process for Missing Terms:

1. **STOP** - Do not proceed with arbitrary naming
2. **REGISTER** - Add the new term to meta_datas first
3. **VERIFY** - Confirm the registration
4. **PROCEED** - Use the registered term

#### Registration Template:

```sql
-- Template for adding new terms (WITH LENGTH VALIDATION)
INSERT INTO meta_datas (meta_cat_cd, meta_eng, meta_kor, meta_description)
VALUES (
    '{CATEGORY}',        -- TABLE/COLUMN/METHOD/CLASS (max 20 chars)
    '{english_name}',    -- English name - MAX 20 CHARACTERS
    '{korean_desc}',     -- Korean description - MAX 30 CHARACTERS
    '{detailed_desc}'    -- Detailed explanation (unlimited)
);

-- MANDATORY: Validate length before insertion
SELECT
    LENGTH('{english_name}') as eng_length,    -- Must be <= 20
    LENGTH('{korean_desc}') as kor_length      -- Must be <= 30
WHERE LENGTH('{english_name}') <= 20 AND LENGTH('{korean_desc}') <= 30;
```

#### Real Examples (WITH LENGTH VALIDATION):

```sql
-- Example 1: New method for payment processing
-- Length check: 'processPaymentRefund' = 20 chars (‚úÖ VALID)
-- Length check: 'Í≤∞Ï†úÌôòÎ∂àÏ≤òÎ¶¨' = 6 chars (‚úÖ VALID)
INSERT INTO meta_datas (meta_cat_cd, meta_eng, meta_kor, meta_description)
VALUES (
    'METHOD',
    'processPaymentRefund',  -- 20 chars (MAX ALLOWED)
    'Í≤∞Ï†úÌôòÎ∂àÏ≤òÎ¶¨',            -- 6 chars (WITHIN 30 limit)
    'Process payment refund for customer transactions'
);

-- Example 2: New table for audit logs
-- Length check: 'audit_log' = 9 chars (‚úÖ VALID)
-- Length check: 'Í∞êÏÇ¨Î°úÍ∑∏' = 4 chars (‚úÖ VALID)
INSERT INTO meta_datas (meta_cat_cd, meta_eng, meta_kor, meta_description)
VALUES (
    'TABLE',
    'audit_log',            -- 9 chars (WITHIN 20 limit)
    'Í∞êÏÇ¨Î°úÍ∑∏',              -- 4 chars (WITHIN 30 limit)
    'System audit log for tracking user actions and system changes'
);

-- Example 3: New column for customer rating
-- Length check: 'customer_rating' = 15 chars (‚úÖ VALID)
-- Length check: 'Í≥†Í∞ùÎì±Í∏â' = 4 chars (‚úÖ VALID)
INSERT INTO meta_datas (meta_cat_cd, meta_eng, meta_kor, meta_description)
VALUES (
    'COLUMN',
    'customer_rating',      -- 15 chars (WITHIN 20 limit)
    'Í≥†Í∞ùÎì±Í∏â',              -- 4 chars (WITHIN 30 limit)
    'Customer rating based on transaction history and behavior'
);

-- ‚ùå INVALID Example: Name too long
-- 'processCustomerPaymentRefundRequest' = 36 chars (EXCEEDS 20 limit)
-- This would be REJECTED - must shorten to 'processPaymentRefund'
```

#### Naming Guidelines for New Terms:

1. **Follow Existing Patterns**:

   ```sql
   -- Check existing similar terms first
   SELECT meta_eng FROM meta_datas
   WHERE meta_kor LIKE '%Í≤∞Ï†ú%' OR meta_eng LIKE '%payment%';
   ```

2. **Use Consistent Vocabulary**:

   - If `customer` is used, don't use `client`
   - If `process` is used, don't use `handle`
   - If `info` is used, don't use `data`

3. **Follow Category Conventions with Length Limits**:

   - **TABLE**: `snake_case`, max 20 chars (e.g., `payment_history`)
   - **COLUMN**: `snake_case`, max 20 chars (e.g., `payment_amount`)
   - **METHOD**: `camelCase`, max 20 chars (e.g., `processPayment`)
   - **CLASS**: `PascalCase`, max 20 chars (e.g., `PaymentProcessor`)

4. **Length Validation Rules**:
   - **ALWAYS** check character count before registration
   - **NEVER** exceed 20 characters for meta_eng
   - **NEVER** exceed 30 characters for meta_kor
   - Use abbreviations if necessary but maintain clarity

## üîß ESSENTIAL QUERIES - Use These Exactly

### Query 1: Category-based Lookup

```sql
SELECT meta_cat_cd, meta_eng, meta_kor, meta_description
FROM meta_datas
WHERE meta_cat_cd = 'TABLE'
ORDER BY meta_eng;
```

### Query 2: Keyword Search

```sql
SELECT meta_eng, meta_kor, meta_description
FROM meta_datas
WHERE meta_kor LIKE '%{keyword}%' OR meta_eng LIKE '%{keyword}%'
ORDER BY meta_cat_cd, meta_eng;
```

### Query 3: Validation Check

```sql
SELECT meta_kor, meta_description
FROM meta_datas
WHERE meta_eng = '{proposed_name}';
```

### Query 4: Check for Similar Terms (Before Adding New)

```sql
-- Find similar terms before creating new ones
SELECT meta_eng, meta_kor, meta_description
FROM meta_datas
WHERE meta_cat_cd = '{CATEGORY}'
  AND (meta_eng LIKE '%{root_word}%' OR meta_kor LIKE '%{korean_root}%')
ORDER BY meta_eng;
```

## üö® CRITICAL VIOLATIONS - NEVER DO THESE

### ‚ùå Violation 1: Arbitrary Naming

```sql
-- WRONG: Creating names without meta_datas lookup
CREATE TABLE cust_tbl (     -- FORBIDDEN: No meta_datas consultation
    cust_no VARCHAR(10),
    cust_nm VARCHAR(50)
);
```

### ‚ùå Violation 2: Translation Tool Usage

```java
// WRONG: Using translation tools directly
public class CustomerTable {  // FORBIDDEN: Direct translation
    public void getCustomerList() { ... }
}
```

### ‚ùå Violation 3: Non-standard Abbreviations

```sql
-- WRONG: Using non-standardized abbreviations
CREATE TABLE cust_info (    -- FORBIDDEN: Non-standard abbreviations
    cust_id VARCHAR(10),
    chnl_cd VARCHAR(5)
);
```

### ‚ùå Violation 4: Mixed Conventions

```java
// WRONG: Mixing different naming styles
public class customer_info_Service {  // FORBIDDEN: Mixed case styles
    public void Get_Customer_List() { ... }  // FORBIDDEN: Inconsistent format
}
```

### ‚ùå Violation 5: Length Limit Violations

```sql
-- WRONG: Exceeding length limits
INSERT INTO meta_datas (meta_cat_cd, meta_eng, meta_kor, meta_description)
VALUES (
    'METHOD',
    'processCustomerPaymentRefundRequestWithValidation',  -- 47 chars - EXCEEDS 20 limit
    'Í≥†Í∞ùÍ≤∞Ï†úÌôòÎ∂àÏöîÏ≤≠Ï≤òÎ¶¨Î∞èÏú†Ìö®ÏÑ±Í≤ÄÏ¶ùÍ∏∞Îä•',                    -- 19 chars - WITHIN 30 limit but eng is invalid
    'Process customer payment refund with validation'
);

-- WRONG: Korean description too long
INSERT INTO meta_datas (meta_cat_cd, meta_eng, meta_kor, meta_description)
VALUES (
    'TABLE',
    'customer_payment',     -- 16 chars - VALID
    'Í≥†Í∞ùÍ≤∞Ï†úÏ†ïÎ≥¥Í¥ÄÎ¶¨Î∞èÏù¥Î†•Ï∂îÏ†ÅÏãúÏä§ÌÖúÌÖåÏù¥Î∏î',  -- 20 chars - WITHIN 30 limit but unnecessarily long
    'Customer payment information management table'
);

-- CORRECT: Shortened versions
INSERT INTO meta_datas (meta_cat_cd, meta_eng, meta_kor, meta_description)
VALUES (
    'METHOD',
    'processPaymentRefund', -- 20 chars - EXACTLY at limit
    'Í≤∞Ï†úÌôòÎ∂àÏ≤òÎ¶¨',          -- 6 chars - CONCISE
    'Process customer payment refund with validation'
);
```

## üìä QUALITY ASSURANCE CHECKLIST

### Before Code Commit (MANDATORY CHECKS)

- [ ] **meta_datas query executed for ALL new names**
- [ ] **Length validation performed (meta_eng ‚â§ 20, meta_kor ‚â§ 30)**
- [ ] **Missing terms registered in meta_datas BEFORE use**
- [ ] **Similar terms checked to avoid duplicates**
- [ ] **Standard terms used EXACTLY as found in meta_datas**
- [ ] **Naming format rules followed PRECISELY**
- [ ] **Consistency verified across entire codebase**
- [ ] **No arbitrary or translated names present**

### Code Review Requirements (NON-NEGOTIABLE)

1. **Evidence of meta_datas consultation**
2. **Exact match with meta_eng values**
3. **Proper category-based formatting**
4. **Project-wide consistency maintained**

## üéØ ENFORCEMENT PRINCIPLES

### The Golden Rule

> **"Every name MUST originate from meta_datas table - NO EXCEPTIONS"**

### The Four Pillars

1. **Query First**: Always consult meta_datas before naming
2. **Use Exact Terms**: No modifications to meta_eng values
3. **Follow Formats**: Strict adherence to category-based patterns
4. **Maintain Consistency**: Uniform application across entire project

### Success Metrics

- **100% meta_datas compliance** for all names
- **Zero arbitrary naming instances**
- **Complete format consistency**
- **Traceable naming decisions**

---

## üöÄ IMPLEMENTATION COMMANDS

### Quick Start Commands

```bash
# 1. Verify meta_datas connection
psql -h localhost -U postgres -d dev_db -c "SELECT COUNT(*) FROM meta_datas;"

# 2. Create naming validation script
echo "SELECT meta_eng FROM meta_datas WHERE meta_cat_cd = 'TABLE';" > validate_names.sql
```

### IDE Integration

```json
// VS Code snippet for meta_datas query
{
  "meta_query": {
    "prefix": "meta",
    "body": [
      "SELECT meta_eng, meta_kor, meta_description",
      "FROM meta_datas",
      "WHERE meta_cat_cd = '$1' AND meta_kor LIKE '%$2%';"
    ]
  }
}
```

---

**REMEMBER: This is not a suggestion - it's a MANDATORY STANDARD. Violation of these rules will result in immediate code rejection.**
