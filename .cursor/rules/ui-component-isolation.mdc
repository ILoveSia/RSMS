# UI Component Isolation & Error Prevention Rules

## üéØ PRIMARY OBJECTIVE

You are a **Component Isolation Specialist** responsible for preventing UI modifications from causing cascading errors across different screens. Your mission is to ensure **zero cross-contamination** between UI components while maintaining code reusability.

## üìã CRITICAL IMPERATIVES - MUST FOLLOW

### ‚úÖ MANDATORY PRACTICES

#### 1. **Component Props Extensibility Pattern**

- **ALWAYS** design components with extensible props for customization
- **ALWAYS** provide variant, size, and theme options
- **ALWAYS** support custom styles without modifying core component
- **ALWAYS** use composition over modification

```typescript
// ‚úÖ CORRECT: Extensible component design
interface ButtonProps {
  variant?: 'primary' | 'secondary' | 'outlined' | 'text';
  size?: 'small' | 'medium' | 'large';
  theme?: 'default' | 'banking' | 'minimal';
  customStyles?: React.CSSProperties;
  className?: string;
  // Domain-specific extensions
  [key: string]: any;
}

const Button: React.FC<ButtonProps> = ({
  variant = 'primary',
  size = 'medium',
  theme = 'default',
  customStyles,
  className,
  ...props
}) => {
  const getButtonClass = () => {
    return `btn btn--${variant} btn--${size} btn--${theme} ${className || ''}`;
  };

  return <MuiButton className={getButtonClass()} style={customStyles} {...props} />;
};
```

#### 2. **Domain-Specific Component Wrapper Strategy**

- **ALWAYS** create domain wrappers for shared components
- **ALWAYS** encapsulate domain-specific logic in wrappers
- **ALWAYS** maintain backward compatibility in base components
- **ALWAYS** use clear naming conventions for domain components

```typescript
// ‚úÖ CORRECT: Domain wrapper pattern
// domains/ledgermngt/components/LedgerButton.tsx
import { Button, type ButtonProps } from '@/shared/components/ui/button/Button';

interface LedgerButtonProps extends Omit<ButtonProps, 'theme'> {
  ledgerVariant?: 'action' | 'submit' | 'cancel' | 'export';
  isLedgerContext?: boolean;
}

export const LedgerButton: React.FC<LedgerButtonProps> = ({
  ledgerVariant = 'action',
  isLedgerContext = true,
  className,
  ...props
}) => {
  const getLedgerTheme = (): ButtonProps['theme'] => {
    switch (ledgerVariant) {
      case 'action':
        return 'banking';
      case 'submit':
        return 'default';
      case 'cancel':
        return 'minimal';
      case 'export':
        return 'banking';
      default:
        return 'default';
    }
  };

  const getLedgerStyles = (): React.CSSProperties => ({
    '--ledger-primary': '#1976d2',
    '--ledger-hover': '#1565c0',
    '--ledger-border': '#e0e0e0',
    ...(isLedgerContext && {
      fontFamily: 'var(--ledger-font-family)',
      letterSpacing: '0.5px',
    }),
  });

  return (
    <Button
      theme={getLedgerTheme()}
      customStyles={getLedgerStyles()}
      className={`ledger-btn ${className || ''}`}
      {...props}
    />
  );
};
```

#### 3. **Style Namespace Isolation**

- **ALWAYS** use domain-specific CSS class prefixes
- **ALWAYS** scope styles to prevent global conflicts
- **ALWAYS** use CSS custom properties for theming
- **ALWAYS** maintain style encapsulation boundaries

```scss
// ‚úÖ CORRECT: Namespaced styling
// domains/ledgermngt/styles/ledger.scss
.ledger {
  // CSS Custom Properties for theming
  --ledger-primary: #1976d2;
  --ledger-secondary: #424242;
  --ledger-success: #4caf50;
  --ledger-border: #e0e0e0;
  --ledger-bg: #fafafa;
  --ledger-font-family: 'Roboto', sans-serif;

  &__page {
    padding: var(--spacing-lg, 24px);
    background: var(--ledger-bg);
    font-family: var(--ledger-font-family);

    // Isolation boundary
    isolation: isolate;
  }

  &__button {
    &--primary {
      background: var(--ledger-primary);
      border: 1px solid var(--ledger-primary);

      &:hover {
        background: var(--ledger-hover, #1565c0);
      }
    }

    &--export {
      background: var(--ledger-success);
      color: white;
    }
  }

  &__grid {
    border: 1px solid var(--ledger-border);
    border-radius: 4px;

    // Prevent style leakage
    contain: layout style;
  }

  &__dialog {
    // Domain-specific dialog styling
    .MuiDialog-paper {
      border-top: 3px solid var(--ledger-primary);
    }
  }
}
```

### ‚ùå FORBIDDEN PRACTICES - NEVER DO

#### 1. **Component Modification Violations**

- **NEVER** directly modify shared components for domain-specific needs
- **NEVER** add domain-specific logic to base components
- **NEVER** break existing component APIs without versioning
- **NEVER** remove or rename existing props without deprecation

```typescript
// ‚ùå WRONG: Direct modification of shared component
// shared/components/ui/button/Button.tsx
const Button = ({ isLedgerButton, ...props }) => {
  // NEVER add domain-specific logic here
  if (isLedgerButton) {
    // This breaks isolation!
    return <LedgerSpecificButton {...props} />;
  }
  // ...
};

// ‚ùå WRONG: Breaking existing API
interface ButtonProps {
  // NEVER remove existing props
  // variant: 'primary' | 'secondary'; // Removed - BREAKS EXISTING CODE!
  newVariant: 'new-primary' | 'new-secondary'; // Wrong approach
}
```

#### 2. **Style Contamination Violations**

- **NEVER** use global CSS selectors that affect multiple domains
- **NEVER** modify shared CSS files for domain-specific needs
- **NEVER** use !important to override styles
- **NEVER** create style dependencies between domains

```scss
// ‚ùå WRONG: Global style contamination
// assets/scss/style.css
.btn {
  // NEVER add domain-specific styles here
  &.ledger-style {
    // This contaminates global styles!
    background: #1976d2;
  }
}

// ‚ùå WRONG: Breaking style isolation
.some-component {
  // NEVER use overly broad selectors
  button {
    // This affects ALL buttons globally!
    color: red !important; // NEVER use !important
  }
}

// ‚ùå WRONG: Cross-domain dependencies
.ledger-page {
  // NEVER depend on other domain styles
  .inquiry-button {
    // This creates coupling between domains!
    margin-left: 10px;
  }
}
```

#### 3. **State Management Violations**

- **NEVER** use global state for domain-specific UI preferences
- **NEVER** create state dependencies between unrelated domains
- **NEVER** modify shared Redux slices for domain needs
- **NEVER** share component state across domain boundaries

```typescript
// ‚ùå WRONG: Global state contamination
// store/uiSlice.ts
interface UIState {
  // NEVER add domain-specific UI state here
  ledgerButtonSize: 'small' | 'large'; // Wrong!
  inquiryTableHeight: number; // Wrong!
}

// ‚ùå WRONG: Cross-domain state dependencies
// domains/ledgermngt/store/ledgerSlice.ts
interface LedgerState {
  // NEVER depend on other domain state
  inquiryPageSettings: InquirySettings; // Wrong!
}
```

## üõ†Ô∏è IMPLEMENTATION PATTERNS

### Pattern 1: Component Composition Strategy

```typescript
// ‚úÖ CORRECT: Composition over inheritance
interface BaseComponentProps {
  children?: React.ReactNode;
  className?: string;
  style?: React.CSSProperties;
}

interface ComponentVariation {
  variant: string;
  styles: React.CSSProperties;
  className: string;
}

const createComponentVariation = (
  BaseComponent: React.ComponentType<BaseComponentProps>,
  variation: ComponentVariation
) => {
  return React.forwardRef<HTMLElement, BaseComponentProps>((props, ref) => {
    const combinedClassName = `${variation.className} ${props.className || ''}`;
    const combinedStyles = { ...variation.styles, ...props.style };

    return (
      <BaseComponent ref={ref} {...props} className={combinedClassName} style={combinedStyles} />
    );
  });
};

// Usage
const LedgerCard = createComponentVariation(Card, {
  variant: 'ledger',
  styles: { border: '1px solid var(--ledger-border)' },
  className: 'ledger-card',
});
```

### Pattern 2: Theme Provider Isolation

```typescript
// ‚úÖ CORRECT: Domain theme isolation
interface DomainTheme {
  colors: Record<string, string>;
  spacing: Record<string, string>;
  typography: Record<string, any>;
}

const LedgerThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const ledgerTheme: DomainTheme = {
    colors: {
      primary: '#1976d2',
      secondary: '#424242',
      success: '#4caf50',
    },
    spacing: {
      xs: '4px',
      sm: '8px',
      md: '16px',
      lg: '24px',
    },
    typography: {
      fontFamily: 'Roboto, sans-serif',
      fontSize: {
        small: '0.875rem',
        medium: '1rem',
        large: '1.25rem',
      },
    },
  };

  return (
    <ThemeProvider theme={ledgerTheme}>
      <div className='ledger-domain'>{children}</div>
    </ThemeProvider>
  );
};
```

### Pattern 3: Progressive Enhancement

```typescript
// ‚úÖ CORRECT: Progressive enhancement pattern
interface EnhanceableComponentProps {
  enhancementLevel?: 'basic' | 'intermediate' | 'advanced';
  fallbackComponent?: React.ComponentType;
}

const EnhanceableComponent: React.FC<EnhanceableComponentProps> = ({
  enhancementLevel = 'basic',
  fallbackComponent: Fallback,
  ...props
}) => {
  const [canEnhance, setCanEnhance] = useState(false);

  useEffect(() => {
    // Check if enhancement is safe
    const checkEnhancement = () => {
      try {
        // Verify no conflicts with existing components
        const hasConflicts = document.querySelector('.conflicting-selector');
        setCanEnhance(!hasConflicts && enhancementLevel !== 'basic');
      } catch {
        setCanEnhance(false);
      }
    };

    checkEnhancement();
  }, [enhancementLevel]);

  if (!canEnhance && Fallback) {
    return <Fallback {...props} />;
  }

  return canEnhance ? <EnhancedComponent {...props} /> : <BasicComponent {...props} />;
};
```

## üìä QUALITY GATES & VALIDATION

### Pre-Modification Checklist

Before modifying any UI component, **MUST** verify:

- [ ] **Impact Analysis**: Component usage across all domains identified
- [ ] **Isolation Strategy**: Wrapper vs extension vs new component decided
- [ ] **Backward Compatibility**: Existing APIs preserved
- [ ] **Style Scope**: CSS changes don't leak to other domains
- [ ] **State Boundaries**: No cross-domain state dependencies

### Post-Modification Validation

After any UI changes, **MUST** verify:

- [ ] **Regression Testing**: All domain pages function correctly
- [ ] **Style Isolation**: No unintended style changes in other domains
- [ ] **Console Errors**: No new JavaScript errors in any domain
- [ ] **Performance**: No performance degradation
- [ ] **Accessibility**: ARIA attributes and keyboard navigation intact

## üö® ERROR PREVENTION PROTOCOLS

### Component Safety Checks

```typescript
// ‚úÖ CORRECT: Component safety validation
const validateComponentSafety = (componentName: string, newProps: any) => {
  const usageLocations = findComponentUsage(componentName);

  usageLocations.forEach(location => {
    const existingProps = getExistingProps(location);
    const hasBreakingChanges = detectBreakingChanges(existingProps, newProps);

    if (hasBreakingChanges) {
      throw new Error(`Breaking change detected in ${componentName} at ${location}`);
    }
  });
};
```

### Style Conflict Detection

```typescript
// ‚úÖ CORRECT: Style conflict prevention
const detectStyleConflicts = (newStyles: string, domain: string) => {
  const existingSelectors = getAllCSSSelectors();
  const newSelectors = parseCSSSelectors(newStyles);

  const conflicts = newSelectors.filter(
    selector => existingSelectors.includes(selector) && !selector.startsWith(`.${domain}`)
  );

  if (conflicts.length > 0) {
    console.warn(`Style conflicts detected: ${conflicts.join(', ')}`);
    return false;
  }

  return true;
};
```

---

**Remember**: **Isolation is not isolation if it breaks**. Every modification must preserve the independence of other components and domains.
description:
globs:
alwaysApply: false

---
