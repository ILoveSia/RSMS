<<<<<<< HEAD
---
description: 'Performance optimization rules and best practices'
globs: '*.js,*.ts,*.tsx,*.java'
---

=======
>>>>>>> d056a66 (add cursor rules)
# Performance Optimization Rules

## ‚ö° PERFORMANCE MANDATE

You are a **Performance-First Developer** responsible for ensuring **optimal application performance** in the ITCEN Solution. **Performance is a feature**, not an afterthought.

## üìä CRITICAL PERFORMANCE REQUIREMENTS

### ‚úÖ MANDATORY PERFORMANCE PRACTICES

#### 1. **Backend Performance (Spring Boot)**

- **ALWAYS** implement pagination for list endpoints
- **ALWAYS** use `@EntityGraph` to prevent N+1 queries
- **ALWAYS** implement database indexing for frequently queried fields
- **ALWAYS** use connection pooling with HikariCP
- **ALWAYS** implement caching with Redis for frequently accessed data

#### 2. **Database Optimization**

- **ALWAYS** use appropriate fetch strategies (LAZY vs EAGER)
- **ALWAYS** optimize JPA queries with `@Query` annotations
- **ALWAYS** implement proper transaction boundaries
- **ALWAYS** use batch processing for bulk operations
- **ALWAYS** monitor and optimize slow queries

#### 3. **Frontend Performance (React)**

- **ALWAYS** use `React.memo()` for expensive components
- **ALWAYS** implement `useCallback` and `useMemo` appropriately
- **ALWAYS** use code splitting with `React.lazy()` and `Suspense`
- **ALWAYS** optimize bundle size with tree shaking
- **ALWAYS** implement proper loading states and error boundaries

#### 4. **API Performance**

- **ALWAYS** implement response compression (gzip)
- **ALWAYS** use appropriate HTTP caching headers
- **ALWAYS** implement request debouncing for search inputs
- **ALWAYS** use efficient data transfer formats (JSON optimization)
- **ALWAYS** implement proper rate limiting

### ‚ùå FORBIDDEN PERFORMANCE ANTI-PATTERNS

#### 1. **Backend Performance Issues**

- **NEVER** use `findAll()` without pagination
- **NEVER** create N+1 query problems
- **NEVER** fetch unnecessary data columns
- **NEVER** use synchronous processing for heavy operations
- **NEVER** ignore database query performance

#### 2. **Frontend Performance Issues**

- **NEVER** create components inside render functions
- **NEVER** use inline objects/arrays in JSX props
- **NEVER** forget to clean up subscriptions and timers
- **NEVER** load all data at once without virtualization
- **NEVER** ignore bundle size optimizations

#### 3. **General Performance Issues**

- **NEVER** block the main thread with heavy computations
- **NEVER** ignore memory leaks
- **NEVER** use inefficient algorithms for large datasets
- **NEVER** skip performance testing
- **NEVER** ignore monitoring and profiling

## üöÄ PERFORMANCE IMPLEMENTATION TEMPLATES

### Backend Performance Template

```java
@RestController
@RequestMapping("/api/users")
@Slf4j
public class UserController {

    private final UserService userService;

    // Paginated endpoint with caching
    @GetMapping
    @Cacheable(value = "users", key = "#pageable.pageNumber + '-' + #pageable.pageSize")
    public ApiResponse<Page<UserDto>> getUsers(Pageable pageable) {
        Page<UserDto> users = userService.getUsers(pageable);
        return ApiResponse.success("Users retrieved successfully", users);
    }

    // Optimized single user fetch with eager loading
    @GetMapping("/{id}")
    @Cacheable(value = "user", key = "#id")
    public ApiResponse<UserDto> getUser(@PathVariable Long id) {
        UserDto user = userService.getUserByIdWithDetails(id);
        return ApiResponse.success("User retrieved successfully", user);
    }
}

@Service
@RequiredArgsConstructor
@Transactional
public class UserServiceImpl implements UserService {

    private final UserRepository userRepository;

    @Override
    @Transactional(readOnly = true)
    public Page<UserDto> getUsers(Pageable pageable) {
        // Use projection to fetch only necessary fields
        Page<UserProjection> users = userRepository.findAllUserProjections(pageable);
        return users.map(UserMapper::projectionToDto);
    }

    @Override
    @Transactional(readOnly = true)
    public UserDto getUserByIdWithDetails(Long id) {
        // Use EntityGraph to prevent N+1 queries
        User user = userRepository.findByIdWithDepartmentAndPosition(id)
            .orElseThrow(() -> new UserNotFoundException("User not found: " + id));
        return UserMapper.toDto(user);
    }

    @Override
    @Async
    public CompletableFuture<Void> processUsersAsync(List<UserDto> users) {
        // Process heavy operations asynchronously
        users.parallelStream()
              .forEach(this::processUser);
        return CompletableFuture.completedFuture(null);
    }
}

@Repository
public interface UserRepository extends JpaRepository<User, Long> {

    // Optimized query with projection
    @Query("SELECT new org.itcen.domain.user.dto.UserProjection(u.id, u.name, u.email) " +
           "FROM User u ORDER BY u.name")
    Page<UserProjection> findAllUserProjections(Pageable pageable);

    // EntityGraph to prevent N+1 queries
    @EntityGraph(attributePaths = {"department", "position"})
    Optional<User> findByIdWithDepartmentAndPosition(Long id);

    // Indexed query for better performance
    @Query("SELECT u FROM User u WHERE u.department.id = :departmentId")
    Page<User> findByDepartmentId(@Param("departmentId") Long departmentId, Pageable pageable);
}
```

### Frontend Performance Template

```typescript
// Memoized component with proper dependency arrays
const UserCard: React.FC<UserCardProps> = React.memo(
  ({ user, onEdit, onDelete, loading = false }) => {
    // Memoize expensive calculations
    const formattedDate = useMemo(() => {
      return formatDate(user.createdAt);
    }, [user.createdAt]);

    // Memoize event handlers
    const handleEdit = useCallback(() => {
      onEdit(user);
    }, [user, onEdit]);

    const handleDelete = useCallback(() => {
      onDelete(user.id);
    }, [user.id, onDelete]);

    return (
      <Card sx={{ p: 2, mb: 1 }}>
        <Typography variant='h6'>{user.name}</Typography>
        <Typography variant='body2' color='text.secondary'>
          {formattedDate}
        </Typography>
        <Box sx={{ mt: 1 }}>
          <Button onClick={handleEdit} disabled={loading}>
            Edit
          </Button>
          <Button onClick={handleDelete} disabled={loading} color='error'>
            Delete
          </Button>
        </Box>
      </Card>
    );
  }
);

// Virtualized list for large datasets
const VirtualizedUserList: React.FC<UserListProps> = ({ users, onUserAction }) => {
  const listRef = useRef<FixedSizeList>(null);

  const MemoizedUserItem = React.memo(({ index, style }: ListChildComponentProps) => {
    const user = users[index];

    return (
      <div style={style}>
        <UserCard user={user} onEdit={onUserAction} onDelete={onUserAction} />
      </div>
    );
  });

  return (
    <FixedSizeList
      ref={listRef}
      height={600}
      itemCount={users.length}
      itemSize={120}
      overscanCount={5}
    >
      {MemoizedUserItem}
    </FixedSizeList>
  );
};

// Optimized search with debouncing
const useOptimizedSearch = (searchEndpoint: string, delay: number = 300) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [results, setResults] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);

  // Debounced search function
  const debouncedSearch = useMemo(
    () =>
      debounce(async (term: string) => {
        if (!term.trim()) {
          setResults([]);
          return;
        }

        setLoading(true);
        try {
          const response = await apiClient.get(searchEndpoint, {
            params: { q: term, limit: 20 }, // Limit results for performance
          });
          setResults(response.data);
        } catch (error) {
          console.error('Search failed:', error);
          setResults([]);
        } finally {
          setLoading(false);
        }
      }, delay),
    [searchEndpoint, delay]
  );

  useEffect(() => {
    debouncedSearch(searchTerm);

    // Cleanup on unmount
    return () => {
      debouncedSearch.cancel();
    };
  }, [searchTerm, debouncedSearch]);

  return {
    searchTerm,
    setSearchTerm,
    results,
    loading,
  };
};

// Code splitting with lazy loading
const LazyUserManagementPage = React.lazy(() =>
  import('./UserManagementPage').then(module => ({
    default: module.UserManagementPage,
  }))
);

const App: React.FC = () => {
  return (
    <Suspense fallback={<Loading />}>
      <LazyUserManagementPage />
    </Suspense>
  );
};
```

## üìà PERFORMANCE MONITORING

### Key Metrics to Track:

1. **Backend Metrics**

   - Database query execution time
   - API response times
   - Memory usage and garbage collection
   - Connection pool utilization
   - Cache hit/miss ratios

2. **Frontend Metrics**
   - First Contentful Paint (FCP)
   - Largest Contentful Paint (LCP)
   - Time to Interactive (TTI)
   - Bundle size and load times
   - React component render times

### Performance Testing Checklist:

- [ ] **Database queries** optimized with proper indexing
- [ ] **API endpoints** respond within acceptable time limits
- [ ] **Frontend components** render efficiently
- [ ] **Bundle size** is optimized and under targets
- [ ] **Memory usage** is stable without leaks

---

**Performance Principle**: **Optimize early, measure often, and never compromise user experience**.
